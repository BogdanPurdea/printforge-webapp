generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  emailVerified DateTime? @map("email_verified")
  image         String?
  avatarUrl     String?
  about         String?
  accounts      Account[]
  sessions      Session[]
  comments      Comment[]
  models        Model[]
  likes         Like[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Model {
  id          String    @id @default(cuid())
  name        String
  description String
  imageUrl    String
  likes       Int       @default(0)
  userId      String
  author      User      @relation(fields: [userId], references: [id])
  categoryId  String
  category    Category  @relation(fields: [categoryId], references: [id])
  comments    Comment[]
  likedBy     Like[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id     String  @id @default(cuid())
  name   String  @unique
  slug   String  @unique
  models Model[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  author    User     @relation(fields: [userId], references: [id])
  modelId   String
  model     Model    @relation(fields: [modelId], references: [id])
  parentId  String?
  parent    Comment? @relation("replies", fields: [parentId], references: [id])
  replies   Comment[] @relation("replies")

  createdAt DateTime @default(now())
}

model Like {
  id      String @id @default(cuid())
  userId  String
  user    User   @relation(fields: [userId], references: [id])
  modelId String
  model   Model  @relation(fields: [modelId], references: [id])

  @@unique([userId, modelId])
}